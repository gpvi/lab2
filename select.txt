program @ { 
block @ { 
decls @ id real if else ) ; false do } ( basic { $ - num true ! while break 
decls¡¯ @ basic 
decl @ basic 
type @ basic 
type¡¯ @ [ 
stmts @ id real if else ) ; false do } ( { $ - num true ! while break 
stmts¡¯ @ if do while id { break 
stmt @ id 
stmt @ if 
stmt @ while 
stmt @ do 
stmt @ break 
stmt @ { 
A @ else 
loc @ id 
loc¡¯ @ [ 
bool @ false id ( real - num true ! 
bool¡¯ @ || 
join @ false id ( real - num true ! 
join¡¯ @ && 
equality @ false id ( real - num true ! 
equality¡¯ @ == 
equality¡¯ @ != 
rel @ false id ( real - num true ! 
B @ < 
B @ <= 
B @ >= 
B @ > 
expr @ false id ( real - num true ! 
expr¡¯ @ + 
expr¡¯ @ - 
term @ false id ( real - num true ! 
term¡¯ @ * 
term¡¯ @ / 
unary @ ! 
unary @ - 
unary @ num false true id ( real 
factor @ ( 
factor @ id 
factor @ num 
factor @ real 
factor @ true 
factor @ false 
